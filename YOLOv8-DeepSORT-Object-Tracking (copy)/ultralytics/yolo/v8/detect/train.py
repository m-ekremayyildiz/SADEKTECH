# Ultralytics YOLO ğŸš€, GPL-3.0 license

from copy import copy

import hydra
import torch
import torch.nn as nn

from ultralytics.nn.tasks import DetectionModel
from ultralytics.yolo import v8
from ultralytics.yolo.data import build_dataloader
from ultralytics.yolo.data.dataloaders.v5loader import create_dataloader
from ultralytics.yolo.engine.trainer import BaseTrainer
from ultralytics.yolo.utils import DEFAULT_CONFIG, colorstr
from ultralytics.yolo.utils.loss import BboxLoss
from ultralytics.yolo.utils.ops import xywh2xyxy
from ultralytics.yolo.utils.plotting import plot_images, plot_results
from ultralytics.yolo.utils.tal import TaskAlignedAssigner, dist2bbox, make_anchors
from ultralytics.yolo.utils.torch_utils import de_parallel


# BaseTrainer python usage
class DetectionTrainer(BaseTrainer):

    def get_dataloader(self, dataset_path, batch_size, mode="train", rank=0):
        """ 
            Bu Python kodu, bir nesne tespit modelinin eÄŸitimini gerÃ§ekleÅŸtiren bir eÄŸitim sÄ±nÄ±fÄ±nÄ± tanÄ±mlamaktadÄ±r. Kod, genel bir eÄŸitim altyapÄ±sÄ± saÄŸlamak Ã¼zere bir temel eÄŸitim sÄ±nÄ±fÄ±nÄ± geniÅŸletmektedir. DetaylarÄ± anlamak iÃ§in her bir metodun ne yaptÄ±ÄŸÄ±nÄ± inceleyelim:

            get_dataloader Metodu:
            Bu metod, veri kÃ¼mesini yÃ¼kleyen ve uygun bir ÅŸekilde yapÄ±landÄ±ran bir veri yÃ¼kleyici (dataloader) oluÅŸturan bir yÃ¶ntemdir.
            dataset_path: Veri kÃ¼mesinin dosya yolu.
            batch_size: Bir eÄŸitim iterasyonunda kullanÄ±lacak Ã¶rnek sayÄ±sÄ±.
            mode: Veri yÃ¼kleyicinin Ã§alÄ±ÅŸma modu, genellikle "train" veya "test".
            rank: Ä°ÅŸlem sÄ±rasÄ± (MPI tabanlÄ± Ã§oklu iÅŸlemde kullanÄ±lÄ±r).
            gs: Stride deÄŸeri, modelin maksimum stride'Ä±nÄ± kontrol eder.
            hyp: Hiperparametreler sÃ¶zlÃ¼ÄŸÃ¼.
            augment: Veri artÄ±rma (data augmentation) yapÄ±lÄ±p yapÄ±lmayacaÄŸÄ±nÄ± belirleyen bir bayrak.
            cache: Veri kÃ¼mesinin Ã¶nceden Ã¶nbelleÄŸe alÄ±nÄ±p alÄ±nmayacaÄŸÄ±nÄ± belirleyen bir bayrak.
            pad: Veri artÄ±rma sÄ±rasÄ±nda kullanÄ±lacak kenar dolgusu (padding) miktarÄ±.
            rect: DikdÃ¶rtgen veri artÄ±rma modunu kontrol eden bir bayrak.
            workers: Veri yÃ¼kleyici tarafÄ±ndan kullanÄ±lacak iÅŸÃ§i sayÄ±sÄ±.
            close_mosaic: Mozaik veri artÄ±rma modunu kontrol eden bir bayrak.
            prefix: MesajlarÄ±n Ã¶nÃ¼ne eklenen bir Ã¶n ek.
            shuffle: Veri kÃ¼mesinin karÄ±ÅŸtÄ±rÄ±lÄ±p karÄ±ÅŸtÄ±rÄ±lmayacaÄŸÄ±nÄ± belirleyen bir bayrak.
            seed: Rastgele sayÄ± Ã¼reteci iÃ§in baÅŸlangÄ±Ã§ â€‹â€‹tohumu.
        """
        # TODO: manage splits differently
        # calculate stride - check if model is initialized
        gs = max(int(de_parallel(self.model).stride.max() if self.model else 0), 32)
        return create_dataloader(path=dataset_path,
                                 imgsz=self.args.imgsz,
                                 batch_size=batch_size,
                                 stride=gs,
                                 hyp=dict(self.args),
                                 augment=mode == "train",
                                 cache=self.args.cache,
                                 pad=0 if mode == "train" else 0.5,
                                 rect=self.args.rect,
                                 rank=rank,
                                 workers=self.args.workers,
                                 close_mosaic=self.args.close_mosaic != 0,
                                 prefix=colorstr(f'{mode}: '),
                                 shuffle=mode == "train",
                                 seed=self.args.seed)[0] if self.args.v5loader else \
            build_dataloader(self.args, batch_size, img_path=dataset_path, stride=gs, rank=rank, mode=mode)[0]
  

    def preprocess_batch(self, batch):
        """Batch verilerini Ã¶n iÅŸleme adÄ±mÄ±nÄ± gerÃ§ekleÅŸtiren bir metod. GÃ¶rÃ¼ntÃ¼leri cihaz hafÄ±zasÄ±na gÃ¶nderir, veri tÃ¼rÃ¼nÃ¼ float'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r ve 0 ile 255 arasÄ±ndaki deÄŸerleri 0 ile 1 arasÄ±na Ã¶lÃ§ekler."""
        batch["img"] = batch["img"].to(self.device, non_blocking=True).float() / 255
        return batch

    def set_model_attributes(self):
        """Modelin Ã¶zelliklerini ayarlayan bir metod. Bu metod, modelin kaÃ§ tane deteksiyon katmanÄ±na sahip olduÄŸunu ve bu katman sayÄ±sÄ±na gÃ¶re bazÄ± hiperparametreleri Ã¶lÃ§ekler."""
        nl = de_parallel(self.model).model[-1].nl  # number of detection layers (to scale hyps)
        self.args.box *= 3 / nl  # scale to layers
        # self.args.cls *= self.data["nc"] / 80 * 3 / nl  # scale to classes and layers
        self.args.cls *= (self.args.imgsz / 640) ** 2 * 3 / nl  # scale to image size and layers
        self.model.nc = self.data["nc"]  # attach number of classes to model
        self.model.args = self.args  # attach hyperparameters to model
        # TODO: self.model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device) * nc
        self.model.names = self.data["names"]

    def get_model(self, cfg=None, weights=None, verbose=True):
        """ Yeni bir nesne tespiti modeli oluÅŸturan bir metod. EÄŸer belirtilmiÅŸse, aÄŸÄ±rlÄ±klarÄ± (weights) yÃ¼kler. Model, DetectionModel adlÄ± bir sÄ±nÄ±ftan tÃ¼retilmiÅŸ gibi gÃ¶rÃ¼nÃ¼yor."""
        model = DetectionModel(cfg, ch=3, nc=self.data["nc"], verbose=verbose)
        if weights:
            model.load(weights)

        return model

    def get_validator(self):
        """Modelin doÄŸrulama (validation) iÅŸlemini gerÃ§ekleÅŸtirmek iÃ§in bir doÄŸrulama sÄ±nÄ±fÄ±nÄ± dÃ¶ndÃ¼ren bir metod. Bu metodun geri dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ sÄ±nÄ±f, modelin doÄŸrulama iÅŸleminde kullanÄ±lacak."""
        self.loss_names = 'box_loss', 'cls_loss', 'dfl_loss'
        return v8.detect.DetectionValidator(self.test_loader,
                                            save_dir=self.save_dir,
                                            logger=self.console,
                                            args=copy(self.args))

    def criterion(self, preds, batch):
        """Bu fonksiyon, modelin tahminlerini ve eÄŸitim veri yÃ¼kÃ¼nÃ¼ alÄ±r ve eÄŸitim kaybÄ±nÄ± hesaplamak iÃ§in kullanÄ±lÄ±r. compute_loss adÄ±nda bir Loss sÄ±nÄ±fÄ±nÄ±n bir Ã¶rneÄŸini kullanÄ±yor gibi gÃ¶rÃ¼nÃ¼yor. Bu, Ã¶zel bir kayÄ±p fonksiyonunu iÃ§erebilir."""
        if not hasattr(self, 'compute_loss'):
            self.compute_loss = Loss(de_parallel(self.model))
        return self.compute_loss(preds, batch)

    def label_loss_items(self, loss_items=None, prefix="train"):
        """Bu fonksiyon, eÄŸitim kaybÄ±nÄ± etiketleyerek (label) daha okunabilir ve takip edilebilir bir formatta dÃ¶ndÃ¼rÃ¼r. Ã–zellikle, bu kaybÄ±n her bir bileÅŸeninin isimlendirilmiÅŸ bir sÃ¶zlÃ¼k olarak dÃ¶ndÃ¼ÄŸÃ¼ gÃ¶rÃ¼nÃ¼yor."""
        """
        Returns a loss dict with labelled training loss items tensor
        """
        # Not needed for classification but necessary for segmentation & detection
        keys = [f"{prefix}/{x}" for x in self.loss_names]
        if loss_items is not None:
            loss_items = [round(float(x), 5) for x in loss_items]  # convert tensors to 5 decimal place floats
            return dict(zip(keys, loss_items))
        else:
            return keys

    def progress_string(self):
        """Bu fonksiyon, eÄŸitim sÄ±rasÄ±nda eÄŸitim ilerlemesini ekrana basmak iÃ§in kullanÄ±lan bir dizeyi oluÅŸturur. Epoch sayÄ±sÄ±, GPU belleÄŸi kullanÄ±mÄ±, kayÄ±p isimleri, Ã¶rnek sayÄ±sÄ± ve boyut gibi bilgiler iÃ§erir."""
        return ('\n' + '%11s' *
                (4 + len(self.loss_names))) % ('Epoch', 'GPU_mem', *self.loss_names, 'Instances', 'Size')

    def plot_training_samples(self, batch, ni):
        """Bu fonksiyon, eÄŸitim Ã¶rneklerinin bir kÄ±smÄ±nÄ± gÃ¶rselleÅŸtirmek iÃ§in kullanÄ±lÄ±r. Genellikle eÄŸitim sÄ±rasÄ±nda modelin nasÄ±l performans gÃ¶sterdiÄŸini kontrol etmek iÃ§in kullanÄ±ÅŸlÄ±dÄ±r."""
        plot_images(images=batch["img"],
                    batch_idx=batch["batch_idx"],
                    cls=batch["cls"].squeeze(-1),
                    bboxes=batch["bboxes"],
                    paths=batch["im_file"],
                    fname=self.save_dir / f"train_batch{ni}.jpg")

    def plot_metrics(self):
        """Bu fonksiyon, eÄŸitim sÄ±rasÄ±nda elde edilen metrikleri (Ã¶rneÄŸin, doÄŸruluk, kayÄ±p gibi) gÃ¶rselleÅŸtirmek iÃ§in kullanÄ±lÄ±r. plot_results fonksiyonunu Ã§aÄŸÄ±rarak bu gÃ¶rselleÅŸtirmeyi saÄŸlÄ±yor olabilir."""
        plot_results(file=self.csv)  # save results.png


# Criterion class for computing training losses
class Loss:

    def __init__(self, model):  # model must be de-paralleled
        """
        Bu kod, YOLOv8 modelinin Ã¶zel bir kayÄ±p fonksiyonu (Loss sÄ±nÄ±fÄ±) iÃ§in bir implementasyonu iÃ§erir. Ä°ÅŸte bu sÄ±nÄ±fÄ±n temel Ã¶zelliklerinin adÄ±m adÄ±m aÃ§Ä±klamalarÄ±:

        __init__ Metodu:
        device = next(model.parameters()).device: Modelin aygÄ±tÄ±nÄ± alÄ±r. Yani, modelin parametrelerinden birinin aygÄ±tÄ±nÄ± kullanÄ±r.
        h = model.args: Modelin hiperparametrelerini alÄ±r.
        m = model.model[-1]: Modelin sonundaki Detect() modÃ¼lÃ¼nÃ¼ alÄ±r.
        self.bce = nn.BCEWithLogitsLoss(reduction='none'): Binary Cross Entropy (BCE) kaybÄ±nÄ± tanÄ±mlar. Bu kayÄ±p, ikili sÄ±nÄ±flandÄ±rma gÃ¶revleri iÃ§in kullanÄ±lÄ±r.
        self.hyp = h: Hiperparametreleri saklar.
        self.stride = m.stride: Modelin adÄ±m deÄŸerlerini saklar.
        self.nc = m.nc: Modelin Ã§Ä±kÄ±ÅŸ sÄ±nÄ±f sayÄ±sÄ±nÄ± saklar.
        self.no = m.no: Modelin Ã§Ä±kÄ±ÅŸ hedef sayÄ±sÄ±nÄ± saklar.
        self.reg_max = m.reg_max: Modelin reg_max Ã¶zelliÄŸini saklar. EÄŸer bu deÄŸer 1'den bÃ¼yÃ¼kse, DFL (Dynamic Feature Learning) kullanÄ±lacak demektir.
        self.device = device: Modelin aygÄ±tÄ±nÄ± saklar.
        self.use_dfl = m.reg_max > 1: DFL kullanÄ±lÄ±p kullanÄ±lmayacaÄŸÄ±nÄ± belirler.
        self.assigner = TaskAlignedAssigner(topk=10, num_classes=self.nc, alpha=0.5, beta=6.0): GÃ¶rev tabanlÄ± bir atama yapÄ±cÄ± oluÅŸturur. Bu, hedefleri tahminlere hizalamak iÃ§in kullanÄ±lÄ±r.
        self.bbox_loss = BboxLoss(m.reg_max - 1, use_dfl=self.use_dfl).to(device): Hesaplanan kutu kaybÄ±nÄ± (BboxLoss) oluÅŸturur. Bu, koordinatlarÄ± ve boyutlarÄ± dÃ¼zeltmeye yÃ¶nelik bir kayÄ±p olabilir.
        self.proj = torch.arange(m.reg_max, dtype=torch.float, device=device): Modelin reg_max Ã¶zelliÄŸine gÃ¶re bir dizi oluÅŸturur.
        """

        device = next(model.parameters()).device  # get model device
        h = model.args  # hyperparameters

        m = model.model[-1]  # Detect() module
        self.bce = nn.BCEWithLogitsLoss(reduction='none')
        self.hyp = h
        self.stride = m.stride  # model strides
        self.nc = m.nc  # number of classes
        self.no = m.no
        self.reg_max = m.reg_max
        self.device = device

        self.use_dfl = m.reg_max > 1
        self.assigner = TaskAlignedAssigner(topk=10, num_classes=self.nc, alpha=0.5, beta=6.0)
        self.bbox_loss = BboxLoss(m.reg_max - 1, use_dfl=self.use_dfl).to(device)
        self.proj = torch.arange(m.reg_max, dtype=torch.float, device=device)

    def preprocess(self, targets, batch_size, scale_tensor):
        # Hedeflerin boyutu (targets.shape[0]) 0 ise (yani hiÃ§ hedef yoksa),
        # bir tensÃ¶r oluÅŸturulur, ancak bu tensÃ¶rÃ¼n iÃ§eriÄŸi sÄ±fÄ±rdÄ±r.
        if targets.shape[0] == 0:
            out = torch.zeros(batch_size, 0, 5, device=self.device)
        else:
            # Hedeflerin ilk sÃ¼tunu (targets[:, 0]) gÃ¶rsel indekslerini iÃ§erir.
            i = targets[:, 0]  # image index

            # Her gÃ¶rselde kaÃ§ hedef olduÄŸunu ve her bir gÃ¶rseldeki hedef sayÄ±sÄ±nÄ± hesapla.
            _, counts = i.unique(return_counts=True)

            # Her bir gÃ¶rsel iÃ§in maksimum hedef sayÄ±sÄ±na sahip bir tensÃ¶r oluÅŸtur.
            out = torch.zeros(batch_size, counts.max(), 5, device=self.device)

            # Her bir gÃ¶rsel iÃ§in dÃ¶ngÃ¼.
            for j in range(batch_size):
                # Ä°lgili gÃ¶rseldeki hedefleri seÃ§.
                matches = i == j
                n = matches.sum()

                # EÄŸer gÃ¶rselde en az bir hedef varsa, bu hedefleri Ã§Ä±kartÄ±lan tensÃ¶re kopyala.
                if n:
                    out[j, :n] = targets[matches, 1:]

            # DÃ¶nÃ¼ÅŸtÃ¼rÃ¼len hedeflerin ikinci sÃ¼tunundan itibaren (1:5 arasÄ±) koordinatlarÄ± xyxy biÃ§imine Ã§evir.
            out[..., 1:5] = xywh2xyxy(out[..., 1:5].mul_(scale_tensor))

        # HazÄ±rlanan hedef tensÃ¶rÃ¼nÃ¼ dÃ¶ndÃ¼r.
        return out


    def bbox_decode(self, anchor_points, pred_dist):
        if self.use_dfl:
            # pred_dist'in boyutlarÄ±: (batch, anchors, channels)
            b, a, c = pred_dist.shape  # batch, anchors, channels
            
            # DFL kullanÄ±lÄ±yorsa, softmax aktivasyonu uygula ve projeksiyon matrisi ile Ã§arp.
            pred_dist = pred_dist.view(b, a, 4, c // 4).softmax(3).matmul(self.proj.type(pred_dist.dtype))

            # pred_dist = pred_dist.view(b, a, c // 4, 4).transpose(2,3).softmax(3).matmul(self.proj.type(pred_dist.dtype))
            # pred_dist = (pred_dist.view(b, a, c // 4, 4).softmax(2) * self.proj.type(pred_dist.dtype).view(1, 1, -1, 1)).sum(2)
        """Bu kod, Ã¶zellikle use_dfl bayraÄŸÄ± kullanÄ±ldÄ±ÄŸÄ±nda geÃ§erli olan bir Ã¶zel durumu ele alÄ±r. EÄŸer use_dfl True ise, pred_dist Ã¼zerinde softmax aktivasyonunu uygular ve projeksiyon matrisi ile Ã§arpar. ArdÄ±ndan, dist2bbox fonksiyonunu kullanarak bu tahmin daÄŸÄ±lÄ±mlarÄ±nÄ± bbox (bounding box) koordinatlarÄ±na Ã§evirir.

        dist2bbox fonksiyonu, bir mesafe tahmini ve referans noktalarÄ± (anchor noktalar) kullanarak bbox koordinatlarÄ±nÄ± hesaplamak iÃ§in genellikle kullanÄ±lan bir yÃ¶ntemdir. Bu fonksiyon, verilen mesafe tahmini ve anchor noktalarÄ±yla iliÅŸkilendirilmiÅŸ bbox'larÄ± dÃ¶ndÃ¼rÃ¼r. Bu, genellikle nesne algÄ±lama modellerinin tahminlerini yorumlamak iÃ§in kullanÄ±lan bir adÄ±mdÄ±r."""
        # dist2bbox fonksiyonunu kullanarak pred_dist'ten bbox koordinatlarÄ±nÄ± Ã§Ä±kar.
        return dist2bbox(pred_dist, anchor_points, xywh=False)

    
    def __call__(self, preds, batch):
        """Bu fonksiyon, detaylÄ± bir nesne algÄ±lama modelinin eÄŸitimi sÄ±rasÄ±nda kullanÄ±lan kayÄ±p fonksiyonunu uygular. Ã‡eÅŸitli kayÄ±p bileÅŸenlerini (bbox loss, cls loss, dfl loss) hesaplamak ve bu kayÄ±plarÄ± hiperparametrelerle Ã§arparak toplam kaybÄ± dÃ¶ndÃ¼rmektedir."""
        loss = torch.zeros(3, device=self.device)  # box, cls, dfl

        # Eldeki tahminlerin yapÄ±larÄ±na gÃ¶re uygun ÅŸekilde ayÄ±rma iÅŸlemi
        feats = preds[1] if isinstance(preds, tuple) else preds
        pred_distri, pred_scores = torch.cat([xi.view(feats[0].shape[0], self.no, -1) for xi in feats], 2).split(
            (self.reg_max * 4, self.nc), 1)

        # Pred_scores ve pred_distri tensorlerini uygun ÅŸekilde dÃ¼zenleme
        pred_scores = pred_scores.permute(0, 2, 1).contiguous()
        pred_distri = pred_distri.permute(0, 2, 1).contiguous()

        dtype = pred_scores.dtype
        batch_size = pred_scores.shape[0]

        # GiriÅŸ resminin boyutlarÄ±
        imgsz = torch.tensor(feats[0].shape[2:], device=self.device, dtype=dtype) * self.stride[0]  # image size (h,w)

        # Anchor noktalarÄ±nÄ± ve stride tensorÃ¼nÃ¼ oluÅŸturma
        anchor_points, stride_tensor = make_anchors(feats, self.stride, 0.5)

        # Hedefleri uygun ÅŸekilde iÅŸleme
        targets = torch.cat((batch["batch_idx"].view(-1, 1), batch["cls"].view(-1, 1), batch["bboxes"]), 1)
        targets = self.preprocess(targets.to(self.device), batch_size, scale_tensor=imgsz[[1, 0, 1, 0]])
        gt_labels, gt_bboxes = targets.split((1, 4), 2)  # cls, xyxy
        mask_gt = gt_bboxes.sum(2, keepdim=True).gt_(0)

        # Tahmini bbox'larÄ± Ã§Ä±karma
        pred_bboxes = self.bbox_decode(anchor_points, pred_distri)  # xyxy, (b, h*w, 4)

        # Tahmini ve gerÃ§ek hedef bbox'larÄ±nÄ± ve skorlarÄ±nÄ± atama
        _, target_bboxes, target_scores, fg_mask, _ = self.assigner(
            pred_scores.detach().sigmoid(), (pred_bboxes.detach() * stride_tensor).type(gt_bboxes.dtype),
            anchor_points * stride_tensor, gt_labels, gt_bboxes, mask_gt)

        target_bboxes /= stride_tensor
        target_scores_sum = target_scores.sum()

        # SÄ±nÄ±f kaybÄ± (cls loss)
        loss[1] = self.bce(pred_scores, target_scores.to(dtype)).sum() / target_scores_sum  # BCE

        # Bbox kaybÄ± ve DFL kaybÄ± (bbox loss, dfl loss)
        if fg_mask.sum():
            loss[0], loss[2] = self.bbox_loss(pred_distri, pred_bboxes, anchor_points, target_bboxes, target_scores,
                                            target_scores_sum, fg_mask)

        # Hiperparametreler ile Ã§arparak toplam kaybÄ± hesaplama
        loss[0] *= self.hyp.box  # box gain
        loss[1] *= self.hyp.cls  # cls gain
        loss[2] *= self.hyp.dfl  # dfl gain

        return loss.sum() * batch_size, loss.detach()  #loss(box, cls, dfl) Toplam kaybÄ± ve ayrÄ±k kayÄ±plarÄ± dÃ¶ndÃ¼rme



# Hydra kÃ¼tÃ¼phanesinden @hydra.main decorator'Ä±nÄ± ekleyerek Hydra'yÄ± kullanmaya baÅŸlÄ±yoruz.
# Hydra, yapÄ±landÄ±rma yÃ¶netimi iÃ§in kullanÄ±lÄ±r.
@hydra.main(version_base=None, config_path=str(DEFAULT_CONFIG.parent), config_name=DEFAULT_CONFIG.name)
def train(cfg):
    # Config dosyalarÄ±nda belirtilmeyen varsayÄ±lan deÄŸerleri atÄ±yoruz.
    cfg.model = cfg.model or "yolov8n.yaml"
    cfg.data = cfg.data or "coco128.yaml"

    # Ultralytics kÃ¼tÃ¼phanesinin YOLO sÄ±nÄ±fÄ±nÄ± kullanarak YOLOv8 modelini oluÅŸturuyoruz.
    from ultralytics import YOLO
    model = YOLO(cfg.model)

    # YOLO modelini eÄŸitiyoruz, bu adÄ±m Ultralytics kÃ¼tÃ¼phanesinin Ã¶zel bir fonksiyonu olan train() ile yapÄ±lÄ±yor.
    model.train(**cfg)


if __name__ == "__main__":
    """
    CLI usage:
    python ultralytics/yolo/v8/detect/train.py model=yolov8n.yaml data=coco128 epochs=100 imgsz=640

    TODO:
    yolo task=detect mode=train model=yolov8n.yaml data=coco128.yaml epochs=100
    """
    # EÄŸer bu script doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yorsa, train() fonksiyonunu Ã§aÄŸÄ±rarak eÄŸitimi baÅŸlatÄ±yoruz.
    train()

